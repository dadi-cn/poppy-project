/**
 * Poppy 的核心函数类 (全局)
 */
if (typeof jQuery === 'undefined') {
	alert('You need import jquery before poppy global util');
}

if (typeof Util !== 'object') {
	Util = {};
}


( function($) {
	if (typeof $.validator !== 'undefined') {

		$.validator.addMethod("mobile", function(phone_number, element) {
			phone_number = phone_number.replace(/\(|\)|\s+|-/g, "");
			return this.optional(element) || Util.isMobile(phone_number);
		}, "Please specify a valid mobile number");

		$.validator.addMethod("email", function(mail, element) {
			mail = mail.replace(/\(|\)|\s+|-/g, "");
			return this.optional(element) || Util.isEmail(mail);
		}, "Please specify a valid email address");

		$.validator.addMethod("qq", function(qq_number, element) {
			qq_number = qq_number.replace(/\(|\)|\s+|-/g, "");
			return this.optional(element) || qq_number.length > 4 &&
				qq_number.match(/^[1-9]\d{3,10}$/);
		}, "Please specify a valid qq number");

		// 中国电话号码的验证
		$.validator.addMethod("phone", function(value, element) {
			return this.optional(element) || /^(([0\+]\d{2,3}-?)?(0\d{2,3})-?)?(\d{7,8})(-(\d{3,}))?$/.test(value);
		}, "Please specify a valid phone number.");

		$.validator.addMethod("ipv4", function(value, element) {
			return this.optional(element)
				||
				/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(value);
		}, "Please input a valid ipv4 address.");

		// 中国电话号码和手机的验证
		$.validator.addMethod("phone_mobile", function(value, element) {
			let phone_number = value.replace(/\(|\)|\s+|-/g, "");
			return ( this.optional(element) || /^(([0\+]\d{2,3}-?)?(0\d{2,3})-?)?(\d{7,8})(-(\d{3,}))?$/.test(value) )
				||
				( this.optional(element) || Util.isMobile(phone_number) );
		}, "Please specify a valid phone number.");

		// 中文身份证验证
		$.validator.addMethod("chId", function(chId, element) {
			let iW   = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2, 1];
			let iSum = 0;
			let iC, iVal;
			for (let i = 0; i < 17; i++) {
				iC   = chId.charAt(i);
				iVal = parseInt(iC, 10);
				iSum += iVal * iW[i];
			}
			let iJYM = iSum % 11;
			let sJYM = '';
			if (iJYM === 0) sJYM = "1";
			else if (iJYM === 1) sJYM = "0";
			else if (iJYM === 2) sJYM = "x";
			else if (iJYM === 3) sJYM = "9";
			else if (iJYM === 4) sJYM = "8";
			else if (iJYM === 5) sJYM = "7";
			else if (iJYM === 6) sJYM = "6";
			else if (iJYM === 7) sJYM = "5";
			else if (iJYM === 8) sJYM = "4";
			else if (iJYM === 9) sJYM = "3";
			else if (iJYM === 10) sJYM = "2";
			let cCheck = chId.charAt(17).toLowerCase();
			return sJYM && cCheck == sJYM;
		}, "Please specify a valid chinese id");

		// 不允许含有空格
		$.validator.addMethod("noSpace", function(value, element) {
			return !/\s+/.test(value);
		}, "Please do not insert space");

		/* 小数验证，小数点位数按照max参数的小数点位数进行判断
		 * 不能为空、只能输入数字 */
		$.validator.addMethod("decimal", function(value, element, params) {
			if (!value) {
				return true;
			}
			if (isNaN(params[0])) {
				return false;
			}
			if (isNaN(params[1])) {
				return false;
			}
			if (isNaN(params[2])) {
				return false;
			}
			if (isNaN(value)) {
				return false;
			}
			if (typeof ( value ) == undefined || value == "") {
				return false;
			}
			let min     = Number(params[0]);
			let max     = Number(params[1]);
			let testVal = Number(value);
			if (typeof ( params[2] ) == undefined || params[2] == 0) {
				let regX = /^\d+$/;
			} else {
				let regxStr = "^\\d+(\\.\\d{1," + params[2] + "})?$";
				let regX    = new RegExp(regxStr);
			}
			return this.optional(element) || ( regX.test(value) && testVal >= min && testVal <= max );
		}, $.validator.format("请正确输入在{0}到{1}之间，最多只保留小数点后{2}的数值"));

		$.validator.addMethod(
			"regex",
			function(value, element, regexp) {
				let re = new RegExp(regexp);
				return this.optional(element) || re.test(value);
			},
			"Please check your input."
		);

		$.validator.addMethod("alphanumeric", function(value, element) {
			return this.optional(element) || /^[\w.]+$/i.test(value);
		}, "Letters, numbers, and underscores only please");

		$.validator.addMethod("alpha", function(value, element) {
			return this.optional(element) || /^[a-zA-Z]+$/i.test(value);
		}, "Letters, numbers, and underscores only please");

		$.validator.addMethod("alpha_dash", function(value, element) {
			return this.optional(element) || /^[a-zA-Z_]+$/i.test(value);
		}, "Letters, numbers, and underscores only please");

		$.extend($.validator.messages, {
			required : "必须填写",
			remote : "请修正此栏位",
			email : "请输入有效的电子邮件",
			qq : '请输入正确的QQ号',
			mobile : '请输入正确的手机号',
			phoneZh : '请输入正确的固定电话号码',
			phoneAmobile : '请输入正确的固话或者手机号',
			url : "请输入有效的网址",
			date : "请输入有效的日期",
			dateISO : "请输入有效的日期 (YYYY-MM-DD)",
			number : "请输入正确的数字",
			digits : "只可输入数字",
			creditcard : "请输入有效的信用卡号码",
			equalTo : "你的输入不相同",
			extension : "请输入有效的后缀",
			maxlength : $.validator.format("最多 {0} 个字"),
			minlength : $.validator.format("最少 {0} 个字"),
			eqlength : $.validator.format("请输入 {0} 长度的字符!"),
			rangelength : $.validator.format("请输入长度为 {0} 至 {1} 之间的字串"),
			range : $.validator.format("请输入 {0} 至 {1} 之间的数值"),
			max : $.validator.format("请输入不大于 {0} 的数值"),
			min : $.validator.format("请输入不小于 {0} 的数值"),
			ipv4 : '请输入正确的IP地址',
			chId : '请输入正确的身份证信息',
			noSpace : '请不要在此输入空格',
			alpha : '请输入字母',
			alpha_dash : '请输入字母或下划线',
			alphanumeric : '请输入字母, 数字, 下划线的组合!',
			decimal : '请正确输入在{0}到{1}之间，最多只保留小数点后{2}的数值',
			step : $.validator.format("请输入 {0} 的整数倍值"),
			regex : '请检查输入是否符合规则'
		});
	}
} )(jQuery);


( function() {
	'use strict';

	/**
	 * 点击加入收藏
	 * @param id
	 */
	Util.addFav = function(id) {
		$(id).on('click', function() {
			if (document.all) {
				try {
					window.external.addFavorite(window.location.href, document.title);
				} catch (e) {
					alert("加入收藏失败，请使用Ctrl+D进行添加");
				}
			} else if (window.sidebar) {
				window.sidebar.addPanel(document.title, window.location.href, "");
			} else {
				alert("加入收藏失败，请使用Ctrl+D进行添加");
			}
		})
	};


	/**
	 * 返回浏览器的版本和ie的判定
	 * @returns {{version: *, safari: boolean, opera: boolean, msie: boolean, mozilla: boolean, is_ie8: boolean, is_ie9: boolean, is_ie10: boolean, is_rtl: boolean}}
	 */
	Util.browser = function() {
		let userAgent = navigator.userAgent.toLowerCase();
		return {
			version : ( userAgent.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [0, '0'] )[1],
			safari : /webkit/.test(userAgent),
			opera : /opera/.test(userAgent),
			msie : /msie/.test(userAgent) && !/opera/.test(userAgent),
			mozilla : /mozilla/.test(userAgent) && !/(compatible|webkit)/.test(userAgent),
			is_ie8 : !!userAgent.match(/msie 8.0/),
			is_ie9 : !!userAgent.match(/msie 9.0/),
			is_ie10 : !!userAgent.match(/msie 10.0/),
			is_wechat : !!userAgent.match(/micromessenger/),
			is_rtl : $('body').css('direction') === 'rtl'
		}
	};

	/*
	 * 提示信息
	 * @params word  String 提示信息
	 * */
	Util.splash = function(resp, append_callback) {
		let obj_resp = Util.toJson(resp);
		let obj_data = {
			_callback : '',
			_show : 'tip',
			_time : 0
		};
		let obj_init = {
			message : 'No Message Send By Server!',
			status : 1
		};

		obj_resp = $.extend(obj_init, obj_resp);
		if (typeof obj_resp.data !== 'undefined') {
			obj_data = $.extend(obj_data, obj_resp.data);
		}
		if (obj_data._show === 'tip') {
			obj_data._time = parseInt(obj_data._time) ? parseInt(obj_data._time) : 0;
			let jump_time;
			if (!obj_data._time && obj_data._location) {
				jump_time = 800;
			}
			if (!obj_data._time && obj_data._reload) {
				jump_time = 800;
			}
			if (!obj_data._time && obj_data._reload_opener) {
				jump_time = 800;
			}
			if (typeof window.mobile !== 'undefined') {
				layer.msg(obj_resp.message, {
					time : 3000
				})
			} else {
				setTimeout(function() {
					if (obj_resp.status === 0) {
						// success icon
						// layer.msg(obj_resp.message, {icon : 1});
						layer.msg(obj_resp.message);
					} else {
						// fail icon
						// layer.msg(obj_resp.message, {icon : 2});
						layer.msg(obj_resp.message);
					}
				}, jump_time);
			}
		}

		if (obj_data._show === 'dialog') {
			delete obj_resp._show;
			let conf  = {};
			let title = !conf.hasOwnProperty('title') ? resp.message : conf.title;
			let content;
			if (obj_data._append) {
				content = obj_data._append;
			} else {
				content = title
			}
			layer.open({
				title : title,
				content : content,
				shadeClose : true
			});
			return false;
		}

		if (obj_data.show === 'callback' || obj_data.callback) {
			let func = obj_data.callback;
			setTimeout(function() {
				eval(func + ";");
			}, obj_data.time);
		}

		if (obj_data._reload) {
			let $winPjax = window.$('form[data-pjax]');
			if ($winPjax.length) {
				$winPjax.submit();
			} else {
				setTimeout(function() {
					if (Util.browser().is_wechat) {
						window.location.search = '?v=' + Date.now();
					} else {
						window.location.reload()
					}
				}, obj_data.time);
				return;
			}
		}
		if (obj_data._top_reload) {
			if (typeof top.window.layui !== 'undefined' && typeof top.window.layui.admin !== 'undefined') {
				top.window.layui.admin.events.refresh();
			} else {
				if (typeof top.window.$ != 'undefined') {
					let $topPjax = top.window.$('form[data-pjax]');
					if ($topPjax.length) {
						$topPjax.submit();
					} else {
						setTimeout(function() {
							top.window.location.reload()
						}, obj_data.time);
					}
				} else {
					setTimeout(function() {
						top.window.location.reload()
					}, obj_data.time);
				}
			}
		}

		if (obj_data._location) {
			setTimeout(function() {
				window.location.href = obj_data._location;
			}, obj_data.time);
		}

		if (obj_data._top_location) {
			setTimeout(function() {
				top.window.location.href = obj_data._top_location;
			}, obj_data.time);
		}

		if (obj_data._reload_opener) {
			setTimeout(function() {
				if (typeof top.layui !== 'undefined' && typeof top.layui.admin !== 'undefined') {
					top.layui.admin.refresh();
				} else {
					top.location.reload();
				}
			}, obj_data._time);
		}

		if (obj_data._iframe_close) {
			setTimeout(function() {
				let opener = Util.opener(obj_data._iframe_close);
				opener.iframe.close();
			}, obj_data._time);
		}

		if (obj_data._captcha_reload) {
			$('.J_captcha').trigger('click');
		}

		if (obj_data._pjax) {
			let $topPjax = top.window.$('form[data-pjax]');
			if ($topPjax.length) {
				$topPjax.submit();
			} else {
				$('form[data-pjax]').submit();
			}
		}

		if (typeof append_callback === 'function') {
			append_callback(obj_resp);
		}
	};
	/**
	 * 字串转 json
	 * @param resp
	 * @returns {*}
	 */
	Util.toJson = function(resp) {
		let objResp;
		if (typeof resp === 'object') {
			objResp = resp;
		} else {
			if ($.trim(resp) === '') {
				objResp = {};
			} else {
				objResp = $.parseJSON(resp);
			}
		}
		return objResp;
	};

	/**
	 * 获取 openner
	 * @param workspace
	 * @returns {*}
	 */
	Util.opener = function(workspace) {
		let opener = top.frames[workspace];
		if (typeof opener === 'undefined') {
			opener = top;
		}
		return opener;
	};

	/**
	 * 按钮交互
	 * @param btn_selector
	 * @param data
	 * @param error_submit
	 */
	Util.buttonInteraction = function(btn_selector, data, error_submit) {
		let objData;
		if (typeof data == 'undefined' || !isNaN(parseInt(data))) {
			$(btn_selector).attr('disabled', true);
			if (!isNaN(parseInt(data))) {
				let time = parseInt(data);
				setTimeout(function() {
					$(btn_selector).attr('disabled', false);
				}, time * 1000);
			}
		}
		objData = Util.toJson(data);
		if (objData.status == 'error') {
			$(btn_selector).attr('disabled', false);
			if (typeof error_submit != 'undefined') {
				$(btn_selector).html(error_submit);
			}
		}
	};


	/**
	 * 事件请求, 使用post 方法
	 * @param $this
	 * @param splash_func
	 * @returns {boolean}
	 */
	Util.requestEvent = function($this, splash_func) {
		// confirm
		let str_confirm = $this.attr('data-confirm');
		if (str_confirm === 'true') {
			str_confirm = '您确定删除此条目 ?';
		}
		if (str_confirm) {
			if (!confirm(str_confirm)) {
				layer.closeAll();
				return false;
			}
		}
		let append = $this.attr('data-append');
		let data   = Util.appendToObj(append);

		let condition_str = $this.attr('data-condition');
		let condition     = Util.conditionToObj(condition_str);
		for (let i in data) {
			if (condition.hasOwnProperty(i) && !data.hasOwnProperty(i)) {
				splash_func({
					'status' : 1,
					'message' : condition[i]
				});
				return false;
			}
		}

		let update = $this.attr('data-update');
		if (update) {
			data._update = update;
		}

		// do request
		let href = $this.attr('href');
		if (!href) {
			href = $this.attr('data-url');
		}
		data._token = Util.csrfToken();
		$.post(href, data, splash_func);
	};

	/**
	 * 获取页面中的 csrf token
	 * @returns {*|jQuery}
	 */
	Util.csrfToken = function() {
		return $('meta[name="csrf-token"]').attr('content');
	};


	/**
	 * 追加元素到对象
	 * @param append
	 * @returns {{}}
	 */
	Util.appendToObj = function(append) {
		let data = {};
		if (append) {
			let appends = [append];
			if (append.indexOf(',') >= 0) {
				appends = append.split(',');
			}
			for (let i in appends) {
				let item = appends[i];
				let re   = /(.*)\((.*)\)/;
				let m;

				if (( m = re.exec(item) ) !== null) {
					if (m.index === re.lastIndex) {
						re.lastIndex++;
					}
				}

				if (m[1].indexOf('checked') >= 0 && m[1].indexOf('radio') < 0) {
					let id_array = [];
					$(m[1]).each(function() {
						id_array.push($(this).val());//向数组中添加元素
					});
					data[m[2]] = id_array;//将数组元素连接起来以构建一个字符串
				} else {
					data[m[2]] = $(m[1]).val();
				}

			}
		}
		return data;
	};


	/**
	 * 条件转换
	 * @param append
	 * @returns {{}}
	 */
	Util.conditionToObj = function(append) {
		let data = {};
		if (append) {
			let appends = append.split(',');
			for (let i in appends) {
				let item = appends[i];
				let re   = /(.*):(.*)/;
				let m;
				if (( m = re.exec(item) ) !== null) {
					if (m.index === re.lastIndex) {
						re.lastIndex++;
					}
					data[m[1]] = m[2];
				}
			}
		}
		return data;
	};

	/**
	 * 对象转换成url地址
	 * @param obj
	 * @param url
	 * @returns {*}
	 */
	Util.objToUrl = function(obj, url) {
		let str = "";
		for (let key in obj) {
			if (str != "") {
				str += "&";
			}
			str += key + "=" + obj[key];
		}
		if (typeof url != 'undefined') {
			return url.indexOf('?') >= 0 ? url + '&' + str : url + '?' + str;
		} else {
			return str;
		}
	};

	/**
	 * 预览图像地址
	 * @param imgSrc
	 * @param w
	 * @returns {boolean}
	 */
	Util.imagePopupShow = function(imgSrc, w) {
		if (!imgSrc) {
			Util.splash({
				status : 1,
				message : '没有图像文件'
			});
			return false;
		}
		Util.imageSize(imgSrc, _popup_show);

		/**
		 * imgObj.width   imgObj.height  imgObj.url
		 * @param imgObj
		 * @private
		 */
		function _popup_show(imgObj) {
			let _w = imgObj.width;
			let _h = imgObj.height;
			if (typeof w != 'undefined' && imgObj.width > w) {
				_w = w;
				_h = parseInt(_w * imgObj.height / imgObj.width);
			}
			let imgStr = '<img src="' + imgObj.url + '" width="' + _w + '" height="' + _h + '" />';
			layer.open({
				title : '图片预览',
				content : imgStr,
				area : [( _w + 40 ) + 'px', ( _h + 80 ) + 'px']
			});
		}
	};


	/**
	 * 计算图片的大小
	 * @param sUrl
	 * @param fCallback
	 */
	Util.imageSize = function(sUrl, fCallback) {
		let img = new Image();
		img.src = sUrl + '?t=' + Math.random();    //IE下，ajax会缓存，导致onreadystatechange函数没有被触发，所以需要加一个随机数
		if (Util.browser().msie) {
			img.onreadystatechange = function() {
				if (this.readyState == "loaded" || this.readyState == "complete") {
					fCallback({width : img.width, height : img.height, url : sUrl});
				}
			};
		} else if (Util.browser().mozilla || Util.browser().safari || Util.browser().opera) {
			img.onload = function() {
				fCallback({width : img.width, height : img.height, url : sUrl});
			};
		} else {
			fCallback({width : img.width, height : img.height, url : sUrl});
		}
	};

	/**
	 * 通过 post 的方法异步读取数据
	 * @param targetPhp
	 * @param queryString
	 * @param success
	 * @param method
	 */
	Util.makeRequest = function(targetPhp, queryString, success, method) {
		if (typeof queryString === 'string') {
			queryString += queryString.indexOf('&') < 0
				? '_token=' + Util.csrfToken()
				: '&_token=' + Util.csrfToken();
		}
		if (typeof queryString === 'object') {
			queryString['_token'] = Util.csrfToken();
		}
		if (typeof queryString === 'undefined') {
			queryString = {
				'_token' : Util.csrfToken()
			}
		}
		if (typeof success === 'undefined') {
			success = Util.splash;
		}
		if (typeof method === 'undefined') {
			method = 'post';
		}
		$.ajax({
			async : false,
			cache : false,
			type : method,
			url : targetPhp,
			data : queryString,
			success : function(data) {
				let obj_data = Util.toJson(data);
				success(obj_data);
			}
		});
	};

	/**
	 * 验证配置
	 * @param rules
	 * @url https://jqueryvalidation.org/validate/
	 * @url https://jqueryvalidation.org/valid/
	 * @url https://vadikom.com/demos/poshytip/
	 */
	Util.validateConfig = function(rules) {
		let config = {
			ignore : '.ignore,[contenteditable=\'true\']',
			// debug : true,
			submitHandler : function(form) {
				$(form).ajaxSubmit({
					success : Util.splash
				});
			},
			// errorClass : 'error',
			// validClass : 'valid',
			onkeyup : function(element) {
				// console.log('on-keyup');
				let elem = $(element);
				elem.valid();
			},
			onfocusout : function(element) {
				// console.log('on-foucus-out');
				let elem = $(element);
				elem.valid();
			},
			highlight : function(element, errorClass, validClass) {
				$(element).closest('.layui-form-auto-field').addClass('layui-form-error');
			},
			unhighlight : function(element) {
				$(element).closest('.layui-form-auto-field').removeClass('layui-form-error');
			},
			success : function(label, element) {
				let elem = $(element);
				elem.poshytip('disable');
				elem.poshytip('destroy');
			},
			errorPlacement : function(error, element) {
				let elem = $(element);
				if (elem.prop('type') === 'file' || elem.prop('type') === 'textarea') {
					elem = $(element).parents('.layui-form-auto-field');
					if (!elem) {
						alert(error);
						return;
					}
				}
				if (!error.is(':empty')) {
					if (elem.data('start-poshy') && error.text()) {
						elem.poshytip('update', error.text());
					} else {
						elem.poshytip({
							className : 'tip-yellowsimple',
							showTimeout : 0,
							showOn : 'hover',
							content : error,
							alignTo : 'target',
							alignX : "inner-left",
							// alignY : aY,
							offsetX : 5,
							offsetY : 5
						});
						elem.poshytip('show');
					}
					elem.data('start-poshy', error.text());

				} else {
					elem.poshytip('disable');
					elem.poshytip('destroy');
					elem.data('start-poshy', '');
				}
			}
		}

		return $.extend(config, rules);
	};

	/**
	 * 获取当前视窗的大小
	 * To get the correct viewport width
	 * based on  http://andylangton.co.uk/articles/javascript/get-viewport-size-javascript/
	 * @returns {{width: *, height: *}}
	 */
	Util.getViewport = function() {
		let e = window,
		    a = 'inner';
		if (!( 'innerWidth' in window )) {
			a = 'client';
			e = document.documentElement || document.body;
		}

		return {
			width : e[a + 'Width'],
			height : e[a + 'Height']
		};
	};


	/**
	 * 检测给定的字串是否是 Url
	 * @param str
	 * @returns {boolean}
	 */
	Util.isUrl = function(str) {
		let pattern = new RegExp("^(https?:\\/\\/)?" + // protocol
			"((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|" + // domain name
			"((\\d{1,3}\\.){3}\\d{1,3}))" + // OR ip (v4) address
			"(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*" + // port and path
			"(\\?[;&a-z\\d%_.~+=-]*)?" + // query string
			"(\\#[-a-z\\d_]*)?$", 'i'); // fragment locater
		return pattern.test(str);
	};

	/**
	 * 判定是否是邮箱
	 * @param str
	 * @returns {boolean}
	 */
	Util.isEmail = function(str) {
		let reg = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\.[a-zA-Z0-9_-]{2,8}){1,2})$/;
		return reg.test(str);
	};

	/**
	 * 判定是否为手机号码
	 * @param str
	 * @returns {boolean|Array|{index: number, input: string}}
	 */
	Util.isMobile = function(str) {
		let phone_number = str.replace(/\(|\)|\s+|-/g, "");
		return phone_number.length > 10 && phone_number.match(/^1[3|4|5|6|8|7|9][0-9]\d{4,8}$/);
	};

	/**
	 * 按钮倒计时工具
	 * @param btn_selector
	 * @param str
	 * @param time
	 * @param end_str
	 */
	Util.countdown = function(btn_selector, str, time, end_str) {
		let count      = time;
		let handlerCountdown;
		let $btn       = $(btn_selector);
		let displayStr = typeof end_str != 'undefined' ? end_str : $btn.text();

		handlerCountdown = setInterval(_countdown, 1000);
		$btn.attr("disabled", true);

		function _countdown() {
			let count_str = str.replace(/\{time\}/, count);
			$btn.text(count_str);
			if (count == 0) {
				$btn.text(displayStr).removeAttr("disabled");
				clearInterval(handlerCountdown);
			}
			count--;
		}
	};

	/**
	 *
	 * @param game_id
	 * @param server_ctr
	 * @param server_key
	 * @param opts
	 */
	Util.serverHtml = function(game_id, server_ctr, server_key, opts) {
		$(function() {
			let $game_id = $('#' + game_id);
			$game_id.on('change', function() {
				get_server($(this).val());
			});
			get_server($game_id.val());
		});

		function get_server(game_id) {
			if (!game_id) return;
			$.get(lemon.support_url.game_server_html, {
				game_id : game_id,
				server_key : server_key,
				options : opts
			}, function(data) {
				$('#' + server_ctr).html(data);
			})
		}
	};

	Util.typeHtml = function(game_id, type_ctr, type_key, opts) {
		$(function() {
			let $game_id = $('#' + game_id);
			$game_id.on('change', function() {
				get_type($(this).val());
			});
			get_type($game_id.val());
		});

		function get_type(game_id) {
			if (!game_id) return;
			$.get(lemon.support_url.game_type_html, {
				game_id : game_id,
				type_key : type_key,
				options : opts
			}, function(data) {
				$('#' + type_ctr).html(data);
			})
		}
	};

	/**
	 * 生成随机字符
	 * @param length
	 * @returns {string}
	 */
	Util.random = function(length) {
		if (typeof length == 'undefined' || parseInt(length) == 0) {
			length = 18;
		}
		let chars = "abcdefhjmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWYXZ";
		let str   = '';
		for (let i = 0; i < length; i++) {
			str += chars.charAt(Math.floor(Math.random() * chars.length));
		}
		return str;
	};

	/**
	 * 方便添加维护类
	 * @returns {{hasClass: *, addClass: *, removeClass: *, toggleClass: toggleClass, has: *, add: *, remove: *, toggle: toggleClass}}
	 */
	Util.classie = function() {
		function classReg(className) {
			return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
		}

		// classList support for class management
		// altho to be fair, the api sucks because it won't accept multiple classes at once
		let hasClass, addClass, removeClass;

		if ('classList' in document.documentElement) {
			hasClass    = function(elem, c) {
				return elem.classList.contains(c);
			};
			addClass    = function(elem, c) {
				elem.classList.add(c);
			};
			removeClass = function(elem, c) {
				elem.classList.remove(c);
			};
		} else {
			hasClass    = function(elem, c) {
				return classReg(c).test(elem.className);
			};
			addClass    = function(elem, c) {
				if (!hasClass(elem, c)) {
					elem.className = elem.className + ' ' + c;
				}
			};
			removeClass = function(elem, c) {
				elem.className = elem.className.replace(classReg(c), ' ');
			};
		}

		function toggleClass(elem, c) {
			let fn = hasClass(elem, c) ? removeClass : addClass;
			fn(elem, c);
		}

		return {
			// full names
			hasClass : hasClass,
			addClass : addClass,
			removeClass : removeClass,
			toggleClass : toggleClass,
			// short names
			has : hasClass,
			add : addClass,
			remove : removeClass,
			toggle : toggleClass
		};
	};


	/**
	 * 计算对象的长度
	 * @param obj
	 * @returns {number}
	 */
	Util.objSize = function(obj) {
		let count = 0;

		if (typeof obj == "object") {

			if (Object.keys) {
				count = Object.keys(obj).length;
			} else if (window._) {
				count = _.keys(obj).length;
			} else if (window.$) {
				count = $.map(obj, function() {
					return 1;
				}).length;
			} else {
				for (let key in obj) if (obj.hasOwnProperty(key)) count++;
			}

		}

		return count;
	};

	/**
	 * 重新载入当前页面
	 */
	Util.refresh = function() {
		top.window.location.reload();
	};

	Util.opener = function(workspace) {
		let opener = top.frames[workspace];
		if (typeof opener == 'undefined') {
			opener = top;
		}
		return opener;
	};

	/**
	 * 执行一次动画
	 * @param selector
	 * @param animation_name
	 */
	Util.animate = function(selector, animation_name) {
		let animationEnd = 'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend';
		$(selector).addClass('animated ' + animation_name).one(animationEnd, function() {
			$(this).removeClass('animated ' + animation_name);
		});
	};

	/**
	 * 全屏
	 * @param ele
	 */
	Util.fullScreen = function(ele) {
		let element;
		if (typeof ele == 'undefined') {
			element = document.documentElement;
		} else {
			element = document.getElementById(ele);
		}
		if (element.requestFullscreen) {
			element.requestFullscreen();
		} else if (element.mozRequestFullScreen) {
			element.mozRequestFullScreen();
		} else if (element.webkitRequestFullscreen) {
			element.webkitRequestFullscreen();
		} else if (element.msRequestFullscreen) {
			element.msRequestFullscreen();
		}
	};

	/**
	 * 退出全屏
	 */
	Util.exitFullScreen = function() {
		if (document.exitFullscreen) {
			document.exitFullscreen();
		} else if (document.mozCancelFullScreen) {
			document.mozCancelFullScreen();
		} else if (document.webkitExitFullscreen) {
			document.webkitExitFullscreen();
		}
	};


	/**
	 * 检查浏览器是否支持 local 存储
	 * @returns {boolean}
	 */
	Util.localStorageSupport = function() {
		return ( ( 'localStorage' in window ) && window['localStorage'] !== null )
	};

	/**
	 * 获取 Url 参数
	 * @param paramName
	 * @returns {string}
	 */
	Util.getUrlParameter = function(paramName) {
		let searchString   = window.location.search.substring(1),
		    i, val, params = searchString.split("&");

		for (i = 0; i < params.length; i++) {
			val = params[i].split("=");
			if (val[0] == paramName) {
				return unescape(val[1]);
			}
		}
		return '';
	};

	/**
	 * 获取当前视窗的大小
	 * To get the correct viewport width
	 * based on  http://andylangton.co.uk/articles/javascript/get-viewport-size-javascript/
	 * @returns {{width: *, height: *}}
	 */
	Util.getViewport = function() {
		let e = window,
		    a = 'inner';
		if (!( 'innerWidth' in window )) {
			a = 'client';
			e = document.documentElement || document.body;
		}

		return {
			width : e[a + 'Width'],
			height : e[a + 'Height']
		};
	};

	/**
	 * 是否是触摸设备
	 * check for device touch support
	 * @returns {boolean}
	 */
	Util.isTouchDevice = function() {
		try {
			document.createEvent("TouchEvent");
			return true;
		} catch (e) {
			return false;
		}
	};


	/**
	 * 获取唯一ID
	 * @param prefix
	 * @returns {string}
	 */
	Util.getUniqueId = function(prefix) {
		let _pre = ( typeof prefix == 'undefined' ) ? 'prefix_' : prefix;
		return _pre + Math.floor(Math.random() * ( new Date() ).getTime());
	};
} )();

/**
 * 根据参数名获取对应的url参数
 * @param {string} name 要取的值key
 * @returns {string|null}
 */
function getQueryString(name) {
	let reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
	let r   = window.location.search.substr(1).match(reg);
	if (r != null) return unescape(r[2]);
	return null;
}

/**
 * Fe控制
 * @author     Mark <zhaody901@126.com>
 * @copyright  Copyright (c) 2018 Sour Lemon Team
 */
( function() {

	$(function() {

		var $body = $('body');

		if ($.fn.tooltip) {
			$('.J_tooltip').tooltip();
		}

		if (typeof moment !== 'undefined') {
			moment.locale('zh-cn');
		}


		// 对话框, 用于显示信息提示
		// 不能用于生成图片组件
		// @see http://stackoverflow.com/questions/12271105/swfupload-startupload-fails-if-not-called-within-the-file-dialog-complete-hand
		$body.on('click', '.J_dialog', function(e) {
			// confirm
			var tip     = $(this).attr('data-tip');
			var element = $(this).attr('data-element');
			var title   = $(this).attr('data-title') ? $(this).attr('data-title') : $(this).html();
			var width   = parseInt($(this).attr('data-width')) ? parseInt($(this).attr('data-width')) : 400;
			var height  = parseInt($(this).attr('data-height')) ? parseInt($(this).attr('data-height')) : '';
			var area    = height ? [width + 'px', height + 'px'] : width + 'px';

			// 获取到元素的 html, 并且存入到当前元素
			if (element) {
				tip = $(element).html();
				$(this).attr('data-tip', tip);
			}

			// open with layer
			layer.open({
				// type   : 1,
				title : title,
				content : tip,
				area : area,
				btn : [],
				shadeClose : true
			});
			e.preventDefault();
		});

		// 弹出 iframe url
		$body.on('click', '.J_iframe', function(e) {
			var $this = $(this);
			// confirm
			var href  = $(this).attr('href');
			if (!href) {
				href = $(this).attr('data-href');
			}
			var title = $(this).attr('data-title') ? $(this).attr('data-title') : '';
			if (!title) {
				title = $(this).attr('title') ? $(this).attr('title') : '';
			}
			if (!title) {
				title = $(this).attr('data-original-title') ? $(this).attr('data-original-title') : $(this).html();
			}
			var width       = parseInt($(this).attr('data-width')) ? parseInt($(this).attr('data-width')) : '500';
			var height      = parseInt($(this).attr('data-height')) ? parseInt($(this).attr('data-height')) : '500';
			var shade_close = $(this).attr('data-shade_close') !== 'false';
			var append      = $this.attr('data-append');
			var data        = Util.appendToObj(append);
			data._iframe    = 'poppy';
			href            = Util.objToUrl(data, href);
			layer.open({
				type : 2,
				content : href,
				area : [width + 'px', height + 'px'],
				title : title,
				shadeClose : shade_close
			});
			e.preventDefault();
			return false;
		});

		// 全选 start
		$body.on('click change', '.J_check_all', function() {
			if (this.checked) {
				$(".J_check_item").prop('checked', true)
			} else {
				$(".J_check_item").prop('checked', false)
			}
		});

		// 确定 请求后台操作, POST 方法
		$body.on('click', '.J_request', function(e) {
			var $btn = $(this);
			Util.buttonInteraction($btn, 5);
			layer.load(3, {
				shade : [0.1, '#000000']
			});
			Util.requestEvent($(this), function(data) {
				Util.splash(data);
				Util.buttonInteraction($btn, data);
				layer.closeAll();
			});
			e.preventDefault();
		});


		// 图片预览
		$body.on('click', '.J_image_preview', function(e) {
			//loading层
			let _src = $(this).attr('src');
			if (typeof _src !== 'undefined' && _src.indexOf('nopic') >= 0) {
				Util.splash({
					status : 1,
					message : '没有图像文件!'
				})
				return;
			}
			if (!_src) {
				_src = $(this).attr('data-src');
			}
			if (e.ctrlKey) {
				window.open($(this).attr('src'), '_blank')
			} else {
				if (!_src) {
					Util.splash({
						status : 1,
						message : '没有图像文件!'
					});
					return false;
				}
				layer.photos({
					shade : [0.6, '#393d49'],
					photos : {
						"title" : "预览", //相册标题
						"id" : 1, //相册id
						"start" : 0, //初始显示的图片序号，默认0
						"data" : [   //相册包含的图片，数组格式
							{
								"alt" : "",
								"pid" : 2, //图片id
								"src" : _src, //原图地址
								"thumb" : _src //缩略图地址
							}
						]
					},
					anim : 5 //0-6的选择，指定弹出图片动画类型，默认随机（请注意，3.0之前的版本用shift参数）
				});
			}
		});

		// reload
		$body.on('click', '.J_reload', function() {
			window.location.reload();
		});

		// print
		$body.on('click', '.J_print', function() {
			window.print();
		});

		/**
		 * 把当前表单的数据临时提交到指定的地址
		 * .J_submit     用法
		 * data-url     : 设置本表单请求的URL
		 * data-ajax    : true|false  设置是否进行ajax 请求
		 * data-confirm : 确认操作提交的提示信息
		 * data-method  : 提交方式
		 */
		$body.on('click', '.J_submit', function(e) {
			let request_url = $(this).attr('data-url');
			let $form       = $(this).parents('form');
			if (!$form.length) {
				Util.splash({
					status : 'error',
					msg : '您不在表单范围内， 请添加到表单范围内'
				});
				return false;
			}

			let old_url = $form.attr('action');
			if (!request_url) {
				request_url = old_url;
			}
			// confirm
			let str_confirm = $(this).attr('data-confirm');
			if (str_confirm === 'true') {
				str_confirm = '您确定删除此条目 ?';
			}
			if (str_confirm && !confirm(str_confirm)) return false;

			let data_ajax   = $(this).attr('data-ajax');
			let data_method = $(this).attr('data-method') ? $(this).attr('data-method') : 'post';

			$form.attr('action', request_url);
			$form.attr('method', data_method);

			// 显示 layer 层
			let index = layer.load(0, {shade : false});
			let conf;
			if (( data_ajax === 'false' )) {
				conf = Util.validateConfig({}, false);
				$form.validate(conf);
				$form.submit();
			} else {
				conf = Util.validateConfig({}, true);
				console.log($form.validate(conf))
				let $btn = $(this);
				Util.buttonInteraction($btn, 5);
				$form.ajaxSubmit({
					success : function(data) {
						layer.close(index);
						Util.splash(data);
						Util.buttonInteraction($btn, data)
					}
				});
			}
			// 还原
			$form.attr('action', old_url);
			e.preventDefault();
		});

		/**
		 * 表单的验证提交
		 */
		$body.on('click', '.J_validate', function(element) {
			var $form = $(this).parents('form');
			if (!$form.length) {
				Util.splash({
					status : 1,
					message : '没有 form 表单'
				});
				return;
			}

			// confirm
			var data_ajax = $form.attr('data-ajax');
			var conf;
			if (( data_ajax === 'false' )) {
				conf = Util.validateConfig({}, false);
				$form.validate(conf);
				// ajax 禁用掉默认
				$(element).on('click', function(e) {
					e.preventDefault();
				})
			} else {
				conf = Util.validateConfig({}, true);
				$form.validate(conf);
			}
		});


		/**
		 * 禁用按钮
		 */
		$body.on('click', '.J_delay', function(e) {
			var $this = $(this);
			var tag   = $this.prop("tagName").toLowerCase();
			if (tag == 'a' && !$this.data('delay')) {
				var _href = $(this).attr('href');
				$this.attr('href', 'javascript:void(0)').addClass('disabled').attr('data-delay', 'ing');
				setTimeout(function() {
					$this.attr('href', _href).removeClass('disabled').removeAttr('data-delay');
				}, 3000);
				e.preventDefault();
			}
			if (tag == 'button' && !$this.data('delay')) {
				$this.addClass('disabled');
				if ($(this).parents('form') && $this.prop('type') == 'submit') {
					$(this).parents('form').submit(function() {
						$this.prop('disabled', true);
					});
				}
				setTimeout(function() {
					$this.removeClass('disabled');
					$this.prop('disabled', false);
				}, 3000)
			}

		});

		/**
		 * 返回传输的内容, 并且将内容显示在弹窗中
		 */
		$(".J_info").each(function() {
			var $this      = $(this);
			var data_url   = $this.attr("data-url");
			var layer_id   = "";
			var index      = '';
			var common_opt = {
				type : 1,
				area : ['400px', 'auto'],
				tips : [2, '#ffffff'],
				closeBtn : 0,
				shade : 0,
				shift : 5
			};
			$this.on("mouseover", function() {
				$.ajax({
					type : 'get',
					url : data_url,
					data : {
						_token : Util.csrfToken()
					},
					success : function(data) {
						var com_content = data.content; //html内容
						var com_opt     = $.extend({}, common_opt, {
							content : com_content,
							success : function(layer_obj) {
								layer_id = layer_obj.selector;
							}
						});
						index           = layer.open(com_opt);
					},
					error : function(XMLHttpRequest, textStatus, errorThrown) {
						alert(XMLHttpRequest.status);
						alert(XMLHttpRequest.readyState);
						alert(textStatus);
					}
				})
			}).on("mouseout", function() {
				var count = 0;
				$(layer_id).on('mouseover', function() {
					count = 1;
				}).on('mouseout', function() {
					count = 0;
				});
				$this.on('mouseover', function() {
					count = 1;
				});
				$body.on('mouseover', function() {
					if (count == 3) {
						clearInterval(t);
					}
				});
				var t = setInterval(function() {
					if (count == 0) {
						layer.close(index);
						count = 3;
					}
				}, 150);
			})
		});
	})


	$('body').on('keydown', function(event) {
		if (event.keyCode == 27) { // esc
			layer.closeAll();
		}
	});
} )();

/**
 * 后台控制面板
 * @author     Mark <zhaody901@126.com>
 * @copyright  Copyright (c) 2018 Sour Lemon Team
 */
(function() {

	$(function() {

		var $body = $('body');

		$("[data-toggle='tooltip']").tooltip();


		// backend nav
		var $showCtr = $('#show-slide_out');
		var $hideCtr = $('#hide-slide_out');
		var $ele = $('#slide-out');
		$showCtr.on('click', function() {
			$ele.css({
				transform  : 'translateX(0)',
				transition : 'transform 0.5s ease-in-out'

			}).animate();
			$body.addClass('fixed-sn-force');
			$hideCtr.show();
			$showCtr.hide();
		});
		$hideCtr.on('click', function() {
			$ele.css({
				transform  : 'translateX(-105%)',
				transition : 'transform 0.5s ease-in-out'

			}).animate();
			$body.removeClass('fixed-sn-force');
			$hideCtr.hide();
			$showCtr.show();
		});



		if ($.support.pjax) {
			$(document).on('submit', 'form[data-pjax]', function(event) {
				var container = $(this).attr('pjax-ctr');
				if (!container) {
					container = '#pjax-container'
				}
				$.pjax.submit(event, container, {
					fragment : container,
					timeout  : 3000,
				});
				event.preventDefault();
			});
			$(document).on('click', 'a[data-pjax], [data-pjax] a:not(.J_ignore)', function(event) {
				var container = $(this).closest('[pjax-ctr]');
				var ctr = container.attr('pjax-ctr');
				if (typeof ctr === 'undefined') {
					ctr = '#pjax-container'
				}

				if ($(ctr).length === 0) {
					Util.splash({
						status  : 1,
						message : '你的页面中没有 Pjax 容器' + ctr + ',请添加, 否则无法进行页面请求'
					});
					return false;
				}

				$.pjax.click(event, {
					container : ctr,
					fragment  : ctr,
					timeout   : 3000
				})
			});
			$(document).on('pjax:send', function() {
				layer.load(3)
			});
			$(document).on('pjax:complete', function() {
				$('.J_tooltip').tooltip();
				layer.closeAll();
				layui.form.render();
			});
		}
	})
})();